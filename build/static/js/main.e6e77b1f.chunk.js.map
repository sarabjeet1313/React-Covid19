{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/Country_Picker/Country_Picker.jsx","App.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/Country_Picker/Country_Picker.module.css","images/covid191.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","updatedUrl","axios","get","modifiedData","console","log","fetchDailyData","map","daily","total","date","reportDate","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","length","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","pieChart","Country_Picker","handleCountryChange","countriesList","getCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","coronaImage","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6e77b1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","import React, { Component } from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading ...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected stats\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {\" \"}\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              {\" \"}\n              Number of active cases of COVID19.{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered stats\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />{\" \"}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {\" \"}\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              {\" \"}\n              Number of recovered cases from COVID19.{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths stats\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />{\" \"}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {\" \"}\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              {\" \"}\n              Number of deaths from COVID19.{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  try {\n    let updatedUrl = `${url}`;\n    if (country) {\n      updatedUrl = `${url}/countries/${country}`;\n    }\n    const { data } = await axios.get(updatedUrl);\n\n    const modifiedData = {\n      confirmed: data.confirmed,\n      recovered: data.recovered,\n      deaths: data.deaths,\n      lastUpdate: data.lastUpdate,\n    };\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((daily) => ({\n      confirmed: daily.confirmed.total,\n      deaths: daily.deaths.total,\n      date: daily.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const countries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"./../../api\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n//import WorldMap from \"react-world-map\";\n\nconst Chart = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Death\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = data.confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0,0,255,0.5)\",\n              \"rgba(0,255,0,0.5)\",\n              \"rgba(255,0,0,0.5)\",\n            ],\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  const pieChart = data.confirmed ? (\n    <Pie\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0,0,255,0.5)\",\n              \"rgba(0,255,0,0.5)\",\n              \"rgba(255,0,0,0.5)\",\n            ],\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  // TBD\n  // const worldMap = data.confirmed ? <WorldMap /> : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : pieChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./Country_Picker.module.css\";\nimport { countries } from \"../../api\";\n\nconst Country_Picker = ({ handleCountryChange }) => {\n  const [countriesList, getCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      getCountries(await countries());\n    };\n\n    fetchCountries();\n  }, [getCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {countriesList.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n        )\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default Country_Picker;\n","import React, { Component } from \"react\";\n\nimport { Cards, Chart, Country_Picker } from \"./Components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nimport coronaImage from \"./images/covid191.png\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data, country });\n    // this.setState({ country });\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVID 19\" />\n        <Cards data={this.state.data} />\n        <Country_Picker handleCountryChange={this.handleCountryChange} />\n        <Chart data={this.state.data} country={this.state.country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_Picker_formControl__32gxU\"};","module.exports = __webpack_public_path__ + \"static/media/covid191.d6ffb636.png\";"],"sourceRoot":""}